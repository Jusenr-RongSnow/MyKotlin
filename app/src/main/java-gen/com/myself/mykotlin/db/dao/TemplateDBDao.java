package com.myself.mykotlin.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.myself.mykotlin.db.entity.TemplateDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "putao_wd_store_template".
*/
public class TemplateDBDao extends AbstractDao<TemplateDB, String> {

    public static final String TABLENAME = "putao_wd_store_template";

    /**
     * Properties of entity TemplateDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Template_id = new Property(0, String.class, "template_id", true, "TEMPLATE_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Template_content = new Property(2, String.class, "template_content", false, "TEMPLATE_CONTENT");
    }


    public TemplateDBDao(DaoConfig config) {
        super(config);
    }
    
    public TemplateDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"putao_wd_store_template\" (" + //
                "\"TEMPLATE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: template_id
                "\"TITLE\" TEXT," + // 1: title
                "\"TEMPLATE_CONTENT\" TEXT);"); // 2: template_content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"putao_wd_store_template\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TemplateDB entity) {
        stmt.clearBindings();
 
        String template_id = entity.getTemplate_id();
        if (template_id != null) {
            stmt.bindString(1, template_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String template_content = entity.getTemplate_content();
        if (template_content != null) {
            stmt.bindString(3, template_content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TemplateDB entity) {
        stmt.clearBindings();
 
        String template_id = entity.getTemplate_id();
        if (template_id != null) {
            stmt.bindString(1, template_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String template_content = entity.getTemplate_content();
        if (template_content != null) {
            stmt.bindString(3, template_content);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TemplateDB readEntity(Cursor cursor, int offset) {
        TemplateDB entity = new TemplateDB( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // template_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // template_content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TemplateDB entity, int offset) {
        entity.setTemplate_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTemplate_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TemplateDB entity, long rowId) {
        return entity.getTemplate_id();
    }
    
    @Override
    public String getKey(TemplateDB entity) {
        if(entity != null) {
            return entity.getTemplate_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TemplateDB entity) {
        return entity.getTemplate_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
