package com.myself.mykotlin.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.myself.mykotlin.db.entity.PushMessageDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "putao_wd_message".
*/
public class PushMessageDBDao extends AbstractDao<PushMessageDB, Long> {

    public static final String TABLENAME = "putao_wd_message";

    /**
     * Properties of entity PushMessageDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Push_id = new Property(0, Long.class, "push_id", true, "PUSH_ID");
        public final static Property Admin_id = new Property(1, String.class, "admin_id", false, "ADMIN_ID");
        public final static Property Show_location = new Property(2, Integer.class, "show_location", false, "SHOW_LOCATION");
        public final static Property Data_type = new Property(3, Integer.class, "data_type", false, "DATA_TYPE");
        public final static Property Cid = new Property(4, String.class, "cid", false, "CID");
        public final static Property Uid = new Property(5, String.class, "uid", false, "UID");
        public final static Property Goods_appid = new Property(6, Integer.class, "goods_appid", false, "GOODS_APPID");
        public final static Property Goods_id = new Property(7, Integer.class, "goods_id", false, "GOODS_ID");
        public final static Property Goods_name = new Property(8, String.class, "goods_name", false, "GOODS_NAME");
        public final static Property Location_type = new Property(9, String.class, "location_type", false, "LOCATION_TYPE");
        public final static Property Location_action = new Property(10, String.class, "location_action", false, "LOCATION_ACTION");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property Release_time = new Property(12, Integer.class, "release_time", false, "RELEASE_TIME");
        public final static Property CustomParams = new Property(13, String.class, "customParams", false, "CUSTOM_PARAMS");
        public final static Property TemplateParam = new Property(14, String.class, "templateParam", false, "TEMPLATE_PARAM");
        public final static Property TemplateContent = new Property(15, String.class, "templateContent", false, "TEMPLATE_CONTENT");
    }


    public PushMessageDBDao(DaoConfig config) {
        super(config);
    }
    
    public PushMessageDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"putao_wd_message\" (" + //
                "\"PUSH_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: push_id
                "\"ADMIN_ID\" TEXT," + // 1: admin_id
                "\"SHOW_LOCATION\" INTEGER," + // 2: show_location
                "\"DATA_TYPE\" INTEGER," + // 3: data_type
                "\"CID\" TEXT," + // 4: cid
                "\"UID\" TEXT," + // 5: uid
                "\"GOODS_APPID\" INTEGER," + // 6: goods_appid
                "\"GOODS_ID\" INTEGER," + // 7: goods_id
                "\"GOODS_NAME\" TEXT," + // 8: goods_name
                "\"LOCATION_TYPE\" TEXT," + // 9: location_type
                "\"LOCATION_ACTION\" TEXT," + // 10: location_action
                "\"STATUS\" TEXT," + // 11: status
                "\"RELEASE_TIME\" INTEGER," + // 12: release_time
                "\"CUSTOM_PARAMS\" TEXT," + // 13: customParams
                "\"TEMPLATE_PARAM\" TEXT," + // 14: templateParam
                "\"TEMPLATE_CONTENT\" TEXT);"); // 15: templateContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"putao_wd_message\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushMessageDB entity) {
        stmt.clearBindings();
 
        Long push_id = entity.getPush_id();
        if (push_id != null) {
            stmt.bindLong(1, push_id);
        }
 
        String admin_id = entity.getAdmin_id();
        if (admin_id != null) {
            stmt.bindString(2, admin_id);
        }
 
        Integer show_location = entity.getShow_location();
        if (show_location != null) {
            stmt.bindLong(3, show_location);
        }
 
        Integer data_type = entity.getData_type();
        if (data_type != null) {
            stmt.bindLong(4, data_type);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(5, cid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
 
        Integer goods_appid = entity.getGoods_appid();
        if (goods_appid != null) {
            stmt.bindLong(7, goods_appid);
        }
 
        Integer goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindLong(8, goods_id);
        }
 
        String goods_name = entity.getGoods_name();
        if (goods_name != null) {
            stmt.bindString(9, goods_name);
        }
 
        String location_type = entity.getLocation_type();
        if (location_type != null) {
            stmt.bindString(10, location_type);
        }
 
        String location_action = entity.getLocation_action();
        if (location_action != null) {
            stmt.bindString(11, location_action);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        Integer release_time = entity.getRelease_time();
        if (release_time != null) {
            stmt.bindLong(13, release_time);
        }
 
        String customParams = entity.getCustomParams();
        if (customParams != null) {
            stmt.bindString(14, customParams);
        }
 
        String templateParam = entity.getTemplateParam();
        if (templateParam != null) {
            stmt.bindString(15, templateParam);
        }
 
        String templateContent = entity.getTemplateContent();
        if (templateContent != null) {
            stmt.bindString(16, templateContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushMessageDB entity) {
        stmt.clearBindings();
 
        Long push_id = entity.getPush_id();
        if (push_id != null) {
            stmt.bindLong(1, push_id);
        }
 
        String admin_id = entity.getAdmin_id();
        if (admin_id != null) {
            stmt.bindString(2, admin_id);
        }
 
        Integer show_location = entity.getShow_location();
        if (show_location != null) {
            stmt.bindLong(3, show_location);
        }
 
        Integer data_type = entity.getData_type();
        if (data_type != null) {
            stmt.bindLong(4, data_type);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(5, cid);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
 
        Integer goods_appid = entity.getGoods_appid();
        if (goods_appid != null) {
            stmt.bindLong(7, goods_appid);
        }
 
        Integer goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindLong(8, goods_id);
        }
 
        String goods_name = entity.getGoods_name();
        if (goods_name != null) {
            stmt.bindString(9, goods_name);
        }
 
        String location_type = entity.getLocation_type();
        if (location_type != null) {
            stmt.bindString(10, location_type);
        }
 
        String location_action = entity.getLocation_action();
        if (location_action != null) {
            stmt.bindString(11, location_action);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        Integer release_time = entity.getRelease_time();
        if (release_time != null) {
            stmt.bindLong(13, release_time);
        }
 
        String customParams = entity.getCustomParams();
        if (customParams != null) {
            stmt.bindString(14, customParams);
        }
 
        String templateParam = entity.getTemplateParam();
        if (templateParam != null) {
            stmt.bindString(15, templateParam);
        }
 
        String templateContent = entity.getTemplateContent();
        if (templateContent != null) {
            stmt.bindString(16, templateContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PushMessageDB readEntity(Cursor cursor, int offset) {
        PushMessageDB entity = new PushMessageDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // push_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // admin_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // show_location
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // data_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uid
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // goods_appid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // goods_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // goods_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // location_type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // location_action
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // release_time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // customParams
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // templateParam
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // templateContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushMessageDB entity, int offset) {
        entity.setPush_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdmin_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShow_location(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setData_type(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoods_appid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setGoods_id(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setGoods_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocation_type(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLocation_action(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRelease_time(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setCustomParams(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTemplateParam(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTemplateContent(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushMessageDB entity, long rowId) {
        entity.setPush_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushMessageDB entity) {
        if(entity != null) {
            return entity.getPush_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PushMessageDB entity) {
        return entity.getPush_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
